import itertools

import networkx as nx
import numpy.random as rnd
import matplotlib.pyplot as plt

graph = nx.Graph()

graph.add_node('Russia')
graph.add_node('Germany')
graph.add_node('United Kingdom')
graph.add_node('France')
graph.add_node('Italy')
graph.add_node('Spain')
graph.add_node('Ukraine')
graph.add_node('Poland')
graph.add_node('Romania')
graph.add_node('Netherlands')
graph.add_node('Belgium')
graph.add_node('Czech Republic')
graph.add_node('Greece')
graph.add_node('Portugal')
graph.add_node('Sweden')
graph.add_node('Hungary')
graph.add_node('Belarus')
graph.add_node('Austria')
graph.add_node('Serbia')
graph.add_node('Switzerland')
graph.add_node('Bulgaria')
graph.add_node('Denmark')
graph.add_node('Finland')
graph.add_node('Slovakia')
graph.add_node('Norway')
graph.add_node('Ireland')
graph.add_node('Croatia')
graph.add_node('Moldova')
graph.add_node('Bosnia and Herzegovina')
graph.add_node('Albania')
graph.add_node('Lithuania')
graph.add_node('North Macedonia')
graph.add_node('Slovenia')
graph.add_node('Latvia')
graph.add_node('Estonia')
graph.add_node('Montenegro')
graph.add_node('Luxembourg')
graph.add_node('Malta')
graph.add_node('Iceland')
graph.add_node('Monaco')
graph.add_node('Andorra')
graph.add_node('Vatican City')
graph.add_node('San Marino')

graph.nodes()

def add_edge(f_item, s_item, graph=None):
  graph.add_edge(f_item, s_item)

add_edge('Albania', 'Greece', graph=graph)
add_edge('Albania', 'North Macedonia', graph=graph)
add_edge('Albania', 'Montenegro', graph=graph)
add_edge('Albania', 'Serbia', graph=graph)
add_edge('Andorra', 'France', graph=graph)
add_edge('Andorra', 'Spain', graph=graph) 
add_edge('Armenia', 'Azerbaijan', graph=graph) 
add_edge('Armenia', 'Georgia', graph=graph)
add_edge('Armenia', 'Turkey', graph=graph)
add_edge('Austria', 'Czech Republic', graph=graph) 
add_edge('Austria', 'Germany', graph=graph)
add_edge('Austria', 'Hungary', graph=graph) 
add_edge('Austria', 'Italy', graph=graph)
add_edge('Austria', 'Liechtenstein', graph=graph) 
add_edge('Austria', 'Slovakia', graph=graph) 
add_edge('Austria', 'Slovenia', graph=graph) 
add_edge('Austria', 'Switzerland', graph=graph) 
add_edge('Azerbaijan', 'Armenia', graph=graph) 
add_edge('Azerbaijan', 'Georgia', graph=graph) 
add_edge('Azerbaijan', 'Russia', graph=graph) 
add_edge('Belarus', 'Latvia', graph=graph)
add_edge('Belarus', 'Lithuania', graph=graph)
add_edge('Belarus', 'Poland', graph=graph) 
add_edge('Belarus', 'Russia', graph=graph) 
add_edge('Belarus', 'Ukraine', graph=graph)
add_edge('Belgium', 'France', graph=graph) 
add_edge('Belgium', 'Germany', graph=graph) 
add_edge('Belgium', 'Luxembourg', graph=graph) 
add_edge('Belgium', 'Netherlands', graph=graph)
add_edge('Bosnia and Herzegovina', 'Croatia', graph=graph)
add_edge('Bosnia and Herzegovina', 'Montenegro', graph=graph) 
add_edge('Bosnia and Herzegovina', 'Serbia', graph=graph)
add_edge('Bulgaria', 'Greece', graph=graph)
add_edge('Bulgaria', 'North Macedonia', graph=graph) 
add_edge('Bulgaria', 'Romania', graph=graph) 
add_edge('Bulgaria', 'Serbia', graph=graph)
add_edge('Bulgaria', 'Turkey', graph=graph)
add_edge('Croatia', 'Bosnia and Herzegovina', graph=graph) 
add_edge('Croatia', 'Hungary', graph=graph)
add_edge('Croatia', 'Montenegro', graph=graph) 
add_edge('Croatia', 'Serbia', graph=graph) 
add_edge('Croatia', 'Slovenia', graph=graph)
add_edge('Czech Republic', 'Austria', graph=graph) 
add_edge('Czech Republic', 'Germany', graph=graph) 
add_edge('Czech Republic', 'Poland', graph=graph)
add_edge('Czech Republic', 'Slovakia', graph=graph)
add_edge('Denmark', 'Germany', graph=graph)
add_edge('Estonia', 'Latvia', graph=graph) 
add_edge('Estonia', 'Russia', graph=graph)
add_edge('Finland', 'Norway', graph=graph)
add_edge('Finland', 'Sweden', graph=graph) 
add_edge('Finland', 'Russia', graph=graph)
add_edge('France', 'Andorra', graph=graph) 
add_edge('France', 'Belgium', graph=graph)
add_edge('France', 'Germany', graph=graph) 
add_edge('France', 'Italy', graph=graph)
add_edge('France', 'Luxembourg', graph=graph) 
add_edge('France', 'Monaco', graph=graph)
add_edge('France', 'Spain', graph=graph)
add_edge('France', 'Switzerland', graph=graph)
add_edge('Georgia', 'Armenia', graph=graph)
add_edge('Georgia', 'Azerbaijan', graph=graph)
add_edge('Georgia', 'Russia', graph=graph)
add_edge('Georgia', 'Turkey', graph=graph)
add_edge('Germany', 'Austria', graph=graph)
add_edge('Germany', 'Belgium', graph=graph) 
add_edge('Germany', 'Czech Republic', graph=graph)
add_edge('Germany', 'Denmark', graph=graph) 
add_edge('Germany', 'France', graph=graph)
add_edge('Germany', 'Luxembourg', graph=graph) 
add_edge('Germany', 'Netherlands', graph=graph)
add_edge('Germany', 'Poland', graph=graph)
add_edge('Germany', 'Switzerland', graph=graph)
add_edge('Greece', 'Albania', graph=graph) 
add_edge('Greece', 'Bulgaria', graph=graph)
add_edge('Greece', 'Turkey', graph=graph)
add_edge('Greece', 'North Macedonia', graph=graph)
add_edge('Hungary', 'Austria', graph=graph) 
add_edge('Hungary', 'Croatia', graph=graph) 
add_edge('Hungary', 'Romania', graph=graph) 
add_edge('Hungary', 'Serbia', graph=graph) 
add_edge('Hungary', 'Slovakia', graph=graph) 
add_edge('Hungary', 'Slovenia', graph=graph) 
add_edge('Hungary', 'Ukraine', graph=graph)
add_edge('Ireland', 'United Kingdom', graph=graph)
add_edge('Italy', 'Austria', graph=graph) 
add_edge('Italy', 'France', graph=graph) 
add_edge('Italy', 'San Marino', graph=graph) 
add_edge('Italy', 'Slovenia', graph=graph) 
add_edge('Italy', 'Switzerland', graph=graph) 
add_edge('Italy', 'Vatican City', graph=graph)
add_edge('Latvia', 'Belarus', graph=graph) 
add_edge('Latvia', 'Estonia', graph=graph) 
add_edge('Latvia', 'Lithuania', graph=graph) 
add_edge('Latvia', 'Russia', graph=graph)
add_edge('Liechtenstein', 'Austria', graph=graph)
add_edge('Liechtenstein', 'Switzerland', graph=graph)
add_edge('Lithuania', 'Belarus', graph=graph) 
add_edge('Lithuania', 'Latvia', graph=graph) 
add_edge('Lithuania', 'Poland', graph=graph) 
add_edge('Lithuania', 'Russia', graph=graph)
add_edge('Luxembourg', 'Belgium', graph=graph)
add_edge('Luxembourg', 'France', graph=graph) 
add_edge('Luxembourg', 'Germany', graph=graph)
add_edge('Moldova', 'Romania', graph=graph)
add_edge('Moldova', 'Ukraine', graph=graph)
add_edge('Monaco', 'France', graph=graph)
add_edge('Montenegro', 'Albania', graph=graph) 
add_edge('Montenegro', 'Bosnia and Herzegovina', graph=graph)
add_edge('Montenegro', 'Croatia', graph=graph)
add_edge('Montenegro', 'Serbia', graph=graph)
add_edge('Netherlands', 'Belgium', graph=graph)
add_edge('Netherlands', 'Germany', graph=graph)
add_edge('North Macedonia', 'Albania', graph=graph) 
add_edge('North Macedonia', 'Bulgaria', graph=graph) 
add_edge('North Macedonia', 'Greece', graph=graph) 
add_edge('North Macedonia', 'Serbia', graph=graph)
add_edge('Norway', 'Finland', graph=graph) 
add_edge('Norway', 'Sweden', graph=graph) 
add_edge('Norway', 'Russia', graph=graph)
add_edge('Poland', 'Belarus', graph=graph) 
add_edge('Poland', 'Czech Republic', graph=graph) 
add_edge('Poland', 'Germany', graph=graph) 
add_edge('Poland', 'Lithuania', graph=graph) 
add_edge('Poland', 'Russia', graph=graph) 
add_edge('Poland', 'Slovakia', graph=graph) 
add_edge('Poland', 'Ukraine', graph=graph)
add_edge('Portugal', 'Spain', graph=graph)
add_edge('Romania', 'Bulgaria', graph=graph) 
add_edge('Romania', 'Hungary', graph=graph) 
add_edge('Romania', 'Moldova', graph=graph) 
add_edge('Romania', 'Serbia', graph=graph) 
add_edge('Romania', 'Ukraine', graph=graph)
add_edge('Russia', 'Azerbaijan', graph=graph) 
add_edge('Russia', 'Belarus', graph=graph) 
add_edge('Russia', 'Estonia', graph=graph) 
add_edge('Russia', 'Finland', graph=graph) 
add_edge('Russia', 'Georgia', graph=graph) 
add_edge('Russia', 'Latvia', graph=graph) 
add_edge('Russia', 'Lithuania', graph=graph) 
add_edge('Russia', 'Norway', graph=graph) 
add_edge('Russia', 'Poland', graph=graph) 
add_edge('Russia', 'Ukraine', graph=graph)
add_edge('San Marino', 'Italy', graph=graph)
add_edge('Serbia', 'Bosnia and Herzegovina', graph=graph) 
add_edge('Serbia', 'Bulgaria', graph=graph) 
add_edge('Serbia', 'Croatia', graph=graph) 
add_edge('Serbia', 'Hungary', graph=graph) 
add_edge('Serbia', 'North Macedonia', graph=graph) 
add_edge('Serbia', 'Montenegro', graph=graph) 
add_edge('Serbia', 'Romania', graph=graph) 
add_edge('Serbia', 'Albania', graph=graph)
add_edge('Slovakia', 'Austria', graph=graph) 
add_edge('Slovakia', 'Czech Republic', graph=graph) 
add_edge('Slovakia', 'Hungary', graph=graph) 
add_edge('Slovakia', 'Poland', graph=graph) 
add_edge('Slovakia', 'Ukraine', graph=graph) 
add_edge('Slovenia', 'Austria', graph=graph) 
add_edge('Slovenia', 'Croatia', graph=graph) 
add_edge('Slovenia', 'Italy', graph=graph) 
add_edge('Slovenia', 'Hungary', graph=graph)
add_edge('Spain', 'Andorra', graph=graph) 
add_edge('Spain', 'France', graph=graph) 
add_edge('Spain', 'Portugal', graph=graph)
add_edge('Sweden', 'Finland', graph=graph) 
add_edge('Sweden', 'Norway', graph=graph)
add_edge('Switzerland', 'Austria', graph=graph) 
add_edge('Switzerland', 'France', graph=graph) 
add_edge('Switzerland', 'Italy', graph=graph) 
add_edge('Switzerland', 'Liechtenstein', graph=graph) 
add_edge('Switzerland', 'Germany', graph=graph)
add_edge('Turkey', 'Armenia', graph=graph) 
add_edge('Turkey', 'Bulgaria', graph=graph) 
add_edge('Turkey', 'Georgia', graph=graph) 
add_edge('Turkey', 'Greece', graph=graph)
add_edge('Ukraine', 'Belarus', graph=graph) 
add_edge('Ukraine', 'Hungary', graph=graph) 
add_edge('Ukraine', 'Moldova', graph=graph) 
add_edge('Ukraine', 'Poland', graph=graph) 
add_edge('Ukraine', 'Romania', graph=graph) 
add_edge('Ukraine', 'Russia', graph=graph) 
add_edge('Ukraine', 'Slovakia', graph=graph)
add_edge('United Kingdom', 'Ireland', graph=graph)
add_edge('Vatican City', 'Italy', graph=graph)

print(graph.number_of_nodes())
print(graph.number_of_edges())
print(graph.degree)
##print(nx.radius(graph))
##print(nx.diameter(graph))

bi_comp = list(nx.biconnected_components(graph))
print('Biconnected components: ', list(nx.biconnected_components(graph)))
block = graph.subgraph(bi_comp[2])

print('2-edge-connected components:', len(list(nx.k_edge_components(graph, k=2))), list(nx.k_edge_components(graph, k=2)))

bicnnctd = graph.subgraph(bi_comp[len(bi_comp) - 1])
comp_connected = nx.k_components(bicnnctd)
##print('SPQR tree:', comp_connected[3])

graph_weight = nx.read_edgelist('weighted_edge.txt', delimiter=',', data=(("weight", int),))
print('Spanning Tree:')
 
 
all_comp = list(nx.biconnected_components(graph_weight))
max_bi_comp = graph_weight.subgraph(all_comp[-1])              # the last component in the list will be the largest one
 
min_span_tree = nx.minimum_spanning_tree(max_bi_comp)
[print(elem) for elem in min_span_tree.edges()]
 
total_weight = int()
# finding total weight of the min_spanning_tree
for i in min_span_tree.edges():
    total_weight += graph_weight[i[0]][i[1]]["weight"]
 
print("Total weight:", total_weight)
print()
 
plt.figure(figsize=(13, 13))
nx.draw_planar(min_span_tree, with_labels=True, font_weight='bold', node_color='pink', edge_color='orange')
# plt.show()   # show spanTree to user

##nx.draw(graph, pos=nx.planar_layout(graph), with_labels=True, node_size = 300, arrows = False)

print('Barycenter:', nx.barycenter(min_span_tree))
 
[print(num, key) for num, key in enumerate(list(min_span_tree.nodes()))]
LabeledMSP = nx.convert_node_labels_to_integers(min_span_tree, ordering='sorted')
print("Prufer:", [elem for elem in nx.to_prufer_sequence(LabeledMSP)])

plt.show()
